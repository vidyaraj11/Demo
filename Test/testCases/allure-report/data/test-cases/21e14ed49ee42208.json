{"uid":"21e14ed49ee42208","name":"test_totalPriceTextOn_pricingPage","fullName":"test_PricingPage.TestPricingPage#test_totalPriceTextOn_pricingPage","historyId":"0ee12782388a9368472b463b49f34bfa","time":{"start":1665389681183,"stop":1665389699805,"duration":18622},"status":"broken","statusMessage":"http.client.RemoteDisconnected: Remote end closed connection without response","statusTrace":"self = <Test.testCases.test_PricingPage.TestPricingPage object at 0x000001943CC88F40>\nsetup = None\n\n    @pytest.mark.scenario\n    #8 validate total price text on pricing page\n    def test_totalPriceTextOn_pricingPage(self, setup):\n        self.logger.info(\"********** successfully signin *********\")\n        self.logger.info(\"**** routed on organisation list page*********\")\n        self.cb = organisationList(self.driver)\n        self.cb.clickOnCreate()\n        self.logger.info(\"*****clicked on create button on organisation list page*********\")\n        self.createorg = Create_org_page(self.driver)\n        self.logger.info(\"**** routed on create organisation page *********\")\n        self.createorg.clickEnter_organisation_text(self.orgName)\n        self.logger.info(\"*****filled new organisation name on create organisation page*********\")\n        self.createorg.Create_button()\n        self.logger.info(\"*****clicked on create button on create organisation page*********\")\n        self.logger.info(\"**** routed on pricing page *********\")\n        self.pp = PricingPage(self.driver)\n>       assert self.pp.TotalPrice_text()\n\ntest_PricingPage.py:206: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\pageObjects\\pricing.py:80: in TotalPrice_text\n    totalprice_text = self.driver.find_element_by_xpath(self.totalPrice_xpath).is_displayed()\n..\\..\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:365: in find_element_by_xpath\n    return self.find_element(by=By.XPATH, value=xpath)\n..\\..\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:841: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\n..\\..\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:306: in execute\n    response = self.command_executor.execute(driver_command, params)\n..\\..\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\remote_connection.py:464: in execute\n    return self._request(command_info[0], url, body=data)\n..\\..\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\remote_connection.py:526: in _request\n    resp = opener.open(request, timeout=self._timeout)\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python38\\lib\\urllib\\request.py:525: in open\n    response = self._open(req, data)\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python38\\lib\\urllib\\request.py:542: in _open\n    result = self._call_chain(self.handle_open, protocol, protocol +\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python38\\lib\\urllib\\request.py:502: in _call_chain\n    result = func(*args)\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python38\\lib\\urllib\\request.py:1360: in https_open\n    return self.do_open(http.client.HTTPSConnection, req,\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python38\\lib\\urllib\\request.py:1321: in do_open\n    r = h.getresponse()\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python38\\lib\\http\\client.py:1322: in getresponse\n    response.begin()\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python38\\lib\\http\\client.py:303: in begin\n    version, status, reason = self._read_status()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <http.client.HTTPResponse object at 0x000001943CD163D0>\n\n    def _read_status(self):\n        line = str(self.fp.readline(_MAXLINE + 1), \"iso-8859-1\")\n        if len(line) > _MAXLINE:\n            raise LineTooLong(\"status line\")\n        if self.debuglevel > 0:\n            print(\"reply:\", repr(line))\n        if not line:\n            # Presumably, the server closed the connection before\n            # sending a valid response.\n>           raise RemoteDisconnected(\"Remote end closed connection without\"\n                                     \" response\")\nE           http.client.RemoteDisconnected: Remote end closed connection without response\n\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python38\\lib\\http\\client.py:272: RemoteDisconnected","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"setup","time":{"start":1665389555987,"stop":1665389681177,"duration":125190},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"stepsCount":0}],"testStage":{"status":"broken","statusMessage":"http.client.RemoteDisconnected: Remote end closed connection without response","statusTrace":"self = <Test.testCases.test_PricingPage.TestPricingPage object at 0x000001943CC88F40>\nsetup = None\n\n    @pytest.mark.scenario\n    #8 validate total price text on pricing page\n    def test_totalPriceTextOn_pricingPage(self, setup):\n        self.logger.info(\"********** successfully signin *********\")\n        self.logger.info(\"**** routed on organisation list page*********\")\n        self.cb = organisationList(self.driver)\n        self.cb.clickOnCreate()\n        self.logger.info(\"*****clicked on create button on organisation list page*********\")\n        self.createorg = Create_org_page(self.driver)\n        self.logger.info(\"**** routed on create organisation page *********\")\n        self.createorg.clickEnter_organisation_text(self.orgName)\n        self.logger.info(\"*****filled new organisation name on create organisation page*********\")\n        self.createorg.Create_button()\n        self.logger.info(\"*****clicked on create button on create organisation page*********\")\n        self.logger.info(\"**** routed on pricing page *********\")\n        self.pp = PricingPage(self.driver)\n>       assert self.pp.TotalPrice_text()\n\ntest_PricingPage.py:206: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\pageObjects\\pricing.py:80: in TotalPrice_text\n    totalprice_text = self.driver.find_element_by_xpath(self.totalPrice_xpath).is_displayed()\n..\\..\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:365: in find_element_by_xpath\n    return self.find_element(by=By.XPATH, value=xpath)\n..\\..\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:841: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\n..\\..\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:306: in execute\n    response = self.command_executor.execute(driver_command, params)\n..\\..\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\remote_connection.py:464: in execute\n    return self._request(command_info[0], url, body=data)\n..\\..\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\remote_connection.py:526: in _request\n    resp = opener.open(request, timeout=self._timeout)\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python38\\lib\\urllib\\request.py:525: in open\n    response = self._open(req, data)\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python38\\lib\\urllib\\request.py:542: in _open\n    result = self._call_chain(self.handle_open, protocol, protocol +\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python38\\lib\\urllib\\request.py:502: in _call_chain\n    result = func(*args)\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python38\\lib\\urllib\\request.py:1360: in https_open\n    return self.do_open(http.client.HTTPSConnection, req,\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python38\\lib\\urllib\\request.py:1321: in do_open\n    r = h.getresponse()\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python38\\lib\\http\\client.py:1322: in getresponse\n    response.begin()\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python38\\lib\\http\\client.py:303: in begin\n    version, status, reason = self._read_status()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <http.client.HTTPResponse object at 0x000001943CD163D0>\n\n    def _read_status(self):\n        line = str(self.fp.readline(_MAXLINE + 1), \"iso-8859-1\")\n        if len(line) > _MAXLINE:\n            raise LineTooLong(\"status line\")\n        if self.debuglevel > 0:\n            print(\"reply:\", repr(line))\n        if not line:\n            # Presumably, the server closed the connection before\n            # sending a valid response.\n>           raise RemoteDisconnected(\"Remote end closed connection without\"\n                                     \" response\")\nE           http.client.RemoteDisconnected: Remote end closed connection without response\n\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python38\\lib\\http\\client.py:272: RemoteDisconnected","steps":[],"attachments":[{"uid":"a4d3433b999225af","name":"log","source":"a4d3433b999225af.txt","type":"text/plain","size":707}],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":1,"hasContent":true,"stepsCount":0},"afterStages":[{"name":"setup::0","time":{"start":1665389702759,"stop":1665389707498,"duration":4739},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"stepsCount":0}],"labels":[{"name":"tag","value":"scenario"},{"name":"suite","value":"test_PricingPage"},{"name":"subSuite","value":"TestPricingPage"},{"name":"host","value":"VidyaR-LAP"},{"name":"thread","value":"16932-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_PricingPage"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":["scenario"]},"source":"21e14ed49ee42208.json","parameterValues":[]}