{"uid":"284033c9266b1826","name":"test_creationOfOrg_sessionPage","fullName":"test_SessionPage.Test_Session_Page#test_creationOfOrg_sessionPage","historyId":"3ed126f1b6edb6b3ca72e141c311f7df","time":{"start":1665408297288,"stop":1665408339895,"duration":42607},"status":"broken","statusMessage":"http.client.RemoteDisconnected: Remote end closed connection without response","statusTrace":"self = <Test.testCases.test_SessionPage.Test_Session_Page object at 0x0000025F01CD6A30>\nsetup = None\n\n    @pytest.mark.scenario\n    #14 validate organisation is created after payment on stripe page\n    def test_creationOfOrg_sessionPage(self, setup):\n        self.logger.info(\"********** successfully signin *********\")\n        self.org = organisationList(self.driver)\n        self.logger.info(\"********routed on organisation list page *********\")\n        self.org.clickOnCreate()\n        self.logger.info(\"********clicked on create button on organisation list page *********\")\n        self.createorg = Create_org_page(self.driver)\n        self.createorg.clickEnter_organisation_text(self.orgName)\n        self.logger.info(\"******** filled new org name on create organisation page *********\")\n        self.createorg.Create_button()\n        self.logger.info(\"******** clicked on create button to create new org on create org page *********\")\n        self.pp = PricingPage(self.driver)\n        self.logger.info(\"********routed on pricing page *********\")\n        self.pp.Confirm_button()\n        self.logger.info(\"******** clicked on confirm button on pricing page *********\")\n        self.strp = Stripe_Page(self.driver)\n        self.logger.info(\"********routed on stripe page *********\")\n        self.strp.clickOnChange()\n        self.logger.info(\"******** clicked on change option on stripe page *********\")\n>       self.strp.fillCardNumber(self.cardnumber)\n\ntest_SessionPage.py:264: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\pageObjects\\stripe.py:31: in fillCardNumber\n    cardno = self.driver.find_element_by_xpath(self.cardnumber_xpath)\n..\\..\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:365: in find_element_by_xpath\n    return self.find_element(by=By.XPATH, value=xpath)\n..\\..\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:841: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\n..\\..\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:306: in execute\n    response = self.command_executor.execute(driver_command, params)\n..\\..\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\remote_connection.py:464: in execute\n    return self._request(command_info[0], url, body=data)\n..\\..\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\remote_connection.py:526: in _request\n    resp = opener.open(request, timeout=self._timeout)\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python38\\lib\\urllib\\request.py:525: in open\n    response = self._open(req, data)\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python38\\lib\\urllib\\request.py:542: in _open\n    result = self._call_chain(self.handle_open, protocol, protocol +\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python38\\lib\\urllib\\request.py:502: in _call_chain\n    result = func(*args)\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python38\\lib\\urllib\\request.py:1360: in https_open\n    return self.do_open(http.client.HTTPSConnection, req,\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python38\\lib\\urllib\\request.py:1321: in do_open\n    r = h.getresponse()\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python38\\lib\\http\\client.py:1322: in getresponse\n    response.begin()\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python38\\lib\\http\\client.py:303: in begin\n    version, status, reason = self._read_status()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <http.client.HTTPResponse object at 0x0000025F01D5E400>\n\n    def _read_status(self):\n        line = str(self.fp.readline(_MAXLINE + 1), \"iso-8859-1\")\n        if len(line) > _MAXLINE:\n            raise LineTooLong(\"status line\")\n        if self.debuglevel > 0:\n            print(\"reply:\", repr(line))\n        if not line:\n            # Presumably, the server closed the connection before\n            # sending a valid response.\n>           raise RemoteDisconnected(\"Remote end closed connection without\"\n                                     \" response\")\nE           http.client.RemoteDisconnected: Remote end closed connection without response\n\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python38\\lib\\http\\client.py:272: RemoteDisconnected","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[{"name":"setup","time":{"start":1665408175906,"stop":1665408297284,"duration":121378},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"stepsCount":0}],"testStage":{"status":"broken","statusMessage":"http.client.RemoteDisconnected: Remote end closed connection without response","statusTrace":"self = <Test.testCases.test_SessionPage.Test_Session_Page object at 0x0000025F01CD6A30>\nsetup = None\n\n    @pytest.mark.scenario\n    #14 validate organisation is created after payment on stripe page\n    def test_creationOfOrg_sessionPage(self, setup):\n        self.logger.info(\"********** successfully signin *********\")\n        self.org = organisationList(self.driver)\n        self.logger.info(\"********routed on organisation list page *********\")\n        self.org.clickOnCreate()\n        self.logger.info(\"********clicked on create button on organisation list page *********\")\n        self.createorg = Create_org_page(self.driver)\n        self.createorg.clickEnter_organisation_text(self.orgName)\n        self.logger.info(\"******** filled new org name on create organisation page *********\")\n        self.createorg.Create_button()\n        self.logger.info(\"******** clicked on create button to create new org on create org page *********\")\n        self.pp = PricingPage(self.driver)\n        self.logger.info(\"********routed on pricing page *********\")\n        self.pp.Confirm_button()\n        self.logger.info(\"******** clicked on confirm button on pricing page *********\")\n        self.strp = Stripe_Page(self.driver)\n        self.logger.info(\"********routed on stripe page *********\")\n        self.strp.clickOnChange()\n        self.logger.info(\"******** clicked on change option on stripe page *********\")\n>       self.strp.fillCardNumber(self.cardnumber)\n\ntest_SessionPage.py:264: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\pageObjects\\stripe.py:31: in fillCardNumber\n    cardno = self.driver.find_element_by_xpath(self.cardnumber_xpath)\n..\\..\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:365: in find_element_by_xpath\n    return self.find_element(by=By.XPATH, value=xpath)\n..\\..\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:841: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\n..\\..\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:306: in execute\n    response = self.command_executor.execute(driver_command, params)\n..\\..\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\remote_connection.py:464: in execute\n    return self._request(command_info[0], url, body=data)\n..\\..\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\remote_connection.py:526: in _request\n    resp = opener.open(request, timeout=self._timeout)\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python38\\lib\\urllib\\request.py:525: in open\n    response = self._open(req, data)\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python38\\lib\\urllib\\request.py:542: in _open\n    result = self._call_chain(self.handle_open, protocol, protocol +\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python38\\lib\\urllib\\request.py:502: in _call_chain\n    result = func(*args)\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python38\\lib\\urllib\\request.py:1360: in https_open\n    return self.do_open(http.client.HTTPSConnection, req,\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python38\\lib\\urllib\\request.py:1321: in do_open\n    r = h.getresponse()\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python38\\lib\\http\\client.py:1322: in getresponse\n    response.begin()\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python38\\lib\\http\\client.py:303: in begin\n    version, status, reason = self._read_status()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <http.client.HTTPResponse object at 0x0000025F01D5E400>\n\n    def _read_status(self):\n        line = str(self.fp.readline(_MAXLINE + 1), \"iso-8859-1\")\n        if len(line) > _MAXLINE:\n            raise LineTooLong(\"status line\")\n        if self.debuglevel > 0:\n            print(\"reply:\", repr(line))\n        if not line:\n            # Presumably, the server closed the connection before\n            # sending a valid response.\n>           raise RemoteDisconnected(\"Remote end closed connection without\"\n                                     \" response\")\nE           http.client.RemoteDisconnected: Remote end closed connection without response\n\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python38\\lib\\http\\client.py:272: RemoteDisconnected","steps":[],"attachments":[{"uid":"8dcade6cc5f49f0b","name":"log","source":"8dcade6cc5f49f0b.txt","type":"text/plain","size":932}],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":1,"hasContent":true,"stepsCount":0},"afterStages":[{"name":"setup::0","time":{"start":1665408340283,"stop":1665408342980,"duration":2697},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"stepsCount":0}],"labels":[{"name":"tag","value":"scenario"},{"name":"suite","value":"test_SessionPage"},{"name":"subSuite","value":"Test_Session_Page"},{"name":"host","value":"VidyaR-LAP"},{"name":"thread","value":"17160-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_SessionPage"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"c61f2dde8c6eef74","status":"broken","statusDetails":"AttributeError: 'Test_Session_Page' object has no attribute 'comp'","time":{"start":1665391207117,"stop":1665391281713,"duration":74596}},{"uid":"f4b59904a35a9360","status":"broken","statusDetails":"AttributeError: 'Test_Session_Page' object has no attribute 'comp'","time":{"start":1665389584683,"stop":1665389659713,"duration":75030}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":["scenario"]},"source":"284033c9266b1826.json","parameterValues":[]}